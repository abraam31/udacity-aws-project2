Description: 
    Computing template

Parameters: 
    EnvironmentName: 
        Description: Naming convention to describe
        Type: String

    AmiID:
        Description: Ubuntu AmiID
        Type: String

    LBSecurityGroupName: 
        Description: LoadBalancer SecurityGroup name
        Type: String

    AppSecurityGroupName: 
        Description: App SecurityGroup name
        Type: String

    WebServersInstanceType: 
        Description: App instance type
        Type: String


Resources:

    S3Role:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: 
                    - s3:Get*
                    - s3:List*
                  Resource: '*'

    UdacityInstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles:
          - !Ref S3Role

    LoadBalancerSG:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow HTTP
            VpcId: 
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VPCID
            GroupName: !Ref LBSecurityGroupName
            SecurityGroupIngress: 
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress: 
            - IpProtocol: -1
              CidrIp: 0.0.0.0/0
            Tags:
            - Key: Name
              Value: !Ref EnvironmentName

    UdagramSG:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow HTTP
            VpcId: 
                Fn::ImportValue:
                    !Sub ${EnvironmentName}-VPCID
            GroupName: !Ref AppSecurityGroupName
            SecurityGroupEgress: 
            - IpProtocol: -1
              CidrIp: 0.0.0.0/0
            Tags:
            - Key: Name
              Value: !Ref EnvironmentName

    InboundRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - LoadBalancerSG
          - GroupId
        GroupId:
          Fn::GetAtt:
          - UdagramSG
          - GroupId

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                        #!/bin/bash
                        apt-get update -y
                        apt-get install unzip awscli -y
                        apt-get install apache2 -y
                        systemctl start apache2.service
                        cd /var/www/html
                        aws s3 cp s3://udacity-demo-1/udacity.zip .
                        unzip -o udacity.zip

            AssociatePublicIpAddress : false
            ImageId: !Ref AmiID
            IamInstanceProfile: !Ref UdacityInstanceProfile
            SecurityGroups:
            - Ref: UdagramSG
            InstanceType: !Ref WebServersInstanceType

            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: '10'


    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 60
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 50
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue:
                !Sub ${EnvironmentName}-PRI-NETS
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '4'
            DesiredCapacity: '4'
            HealthCheckType: ELB 
            HealthCheckGracePeriod: 60 
            TargetGroupARNs:
              - !Ref WebAppTargetGroup


    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SUB"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SUB"
            SecurityGroups:
            - Ref: LoadBalancerSG
    
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1

Outputs:
    LBDns:
        Description: PublicDNS  
        Value: !Join
                - ''
                - - 'http://'
                  - !GetAtt WebAppLB.DNSName
        Export:
            Name: !Sub ${EnvironmentName}-LBDnsName